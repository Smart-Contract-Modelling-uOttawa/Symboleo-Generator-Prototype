/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.symg.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SymgGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDomainNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomainNameIDTerminalRuleCall_1_0 = (RuleCall)cDomainNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDomainConceptsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDomainConceptsDomainConceptParserRuleCall_2_0_0 = (RuleCall)cDomainConceptsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEndDomainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cContractKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContractNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContractNameIDTerminalRuleCall_5_0 = (RuleCall)cContractNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cParametersAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_7_0_0 = (RuleCall)cParametersAssignment_7_0.eContents().get(0);
		private final Keyword cCommaKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cParametersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParametersParameterParserRuleCall_8_0 = (RuleCall)cParametersAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cDeclarationsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Assignment cDeclarationsAssignment_10_1_0 = (Assignment)cGroup_10_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarParserRuleCall_10_1_0_0 = (RuleCall)cDeclarationsAssignment_10_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1_1 = (Keyword)cGroup_10_1.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cPreconditionsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Assignment cPreconditionsAssignment_11_1_0 = (Assignment)cGroup_11_1.eContents().get(0);
		private final RuleCall cPreconditionsPropositionParserRuleCall_11_1_0_0 = (RuleCall)cPreconditionsAssignment_11_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_1 = (Keyword)cGroup_11_1.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cPostconditionsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Assignment cPostconditionsAssignment_12_1_0 = (Assignment)cGroup_12_1.eContents().get(0);
		private final RuleCall cPostconditionsPropositionParserRuleCall_12_1_0_0 = (RuleCall)cPostconditionsAssignment_12_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cObligationsKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Assignment cObligationsAssignment_13_1_0 = (Assignment)cGroup_13_1.eContents().get(0);
		private final RuleCall cObligationsObligationParserRuleCall_13_1_0_0 = (RuleCall)cObligationsAssignment_13_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_1_1 = (Keyword)cGroup_13_1.eContents().get(1);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cSurvivingObligationsKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final Assignment cSobligationsAssignment_14_1_0 = (Assignment)cGroup_14_1.eContents().get(0);
		private final RuleCall cSobligationsObligationParserRuleCall_14_1_0_0 = (RuleCall)cSobligationsAssignment_14_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_1_1 = (Keyword)cGroup_14_1.eContents().get(1);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cPowersKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Group cGroup_15_1 = (Group)cGroup_15.eContents().get(1);
		private final Assignment cPowersAssignment_15_1_0 = (Assignment)cGroup_15_1.eContents().get(0);
		private final RuleCall cPowersPowerParserRuleCall_15_1_0_0 = (RuleCall)cPowersAssignment_15_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1_1 = (Keyword)cGroup_15_1.eContents().get(1);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cConstraintsKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Group cGroup_16_1 = (Group)cGroup_16.eContents().get(1);
		private final Assignment cConstraintsAssignment_16_1_0 = (Assignment)cGroup_16_1.eContents().get(0);
		private final RuleCall cConstraintsPropositionParserRuleCall_16_1_0_0 = (RuleCall)cConstraintsAssignment_16_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_16_1_1 = (Keyword)cGroup_16_1.eContents().get(1);
		private final Keyword cEndContractKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//Model:
		//	'Domain' domainName=ID (domainConcepts+=DomainConcept ';')+
		//	'endDomain'
		//	'Contract' contractName=ID '(' (parameters+=Parameter ',')+ parameters+=Parameter ')' ('Declarations'
		//	(declarations+=Declar ';')*)? ('Preconditions' (preconditions+=Proposition ';')*)? ('Postconditions'
		//	(postconditions+=Proposition ';')*)? ('Obligations' (obligations+=Obligation ';')*)? ('SurvivingObligations'
		//	(sobligations+=Obligation ';')*)? ('Powers' (powers+=Power ';')*)? ('Constraints' (constraints+=Proposition ';')*)?
		//	'endContract';
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' domainName=ID (domainConcepts+=DomainConcept ';')+ 'endDomain' 'Contract' contractName=ID '('
		//(parameters+=Parameter ',')+ parameters+=Parameter ')' ('Declarations' (declarations+=Declar ';')*)? ('Preconditions'
		//(preconditions+=Proposition ';')*)? ('Postconditions' (postconditions+=Proposition ';')*)? ('Obligations'
		//(obligations+=Obligation ';')*)? ('SurvivingObligations' (sobligations+=Obligation ';')*)? ('Powers' (powers+=Power
		//';')*)? ('Constraints' (constraints+=Proposition ';')*)? 'endContract'
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//domainName=ID
		public Assignment getDomainNameAssignment_1() { return cDomainNameAssignment_1; }
		
		//ID
		public RuleCall getDomainNameIDTerminalRuleCall_1_0() { return cDomainNameIDTerminalRuleCall_1_0; }
		
		//(domainConcepts+=DomainConcept ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//domainConcepts+=DomainConcept
		public Assignment getDomainConceptsAssignment_2_0() { return cDomainConceptsAssignment_2_0; }
		
		//DomainConcept
		public RuleCall getDomainConceptsDomainConceptParserRuleCall_2_0_0() { return cDomainConceptsDomainConceptParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'endDomain'
		public Keyword getEndDomainKeyword_3() { return cEndDomainKeyword_3; }
		
		//'Contract'
		public Keyword getContractKeyword_4() { return cContractKeyword_4; }
		
		//contractName=ID
		public Assignment getContractNameAssignment_5() { return cContractNameAssignment_5; }
		
		//ID
		public RuleCall getContractNameIDTerminalRuleCall_5_0() { return cContractNameIDTerminalRuleCall_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//(parameters+=Parameter ',')+
		public Group getGroup_7() { return cGroup_7; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_7_0() { return cParametersAssignment_7_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_7_0_0() { return cParametersParameterParserRuleCall_7_0_0; }
		
		//','
		public Keyword getCommaKeyword_7_1() { return cCommaKeyword_7_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_8() { return cParametersAssignment_8; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_8_0() { return cParametersParameterParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//('Declarations' (declarations+=Declar ';')*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'Declarations'
		public Keyword getDeclarationsKeyword_10_0() { return cDeclarationsKeyword_10_0; }
		
		//(declarations+=Declar ';')*
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//declarations+=Declar
		public Assignment getDeclarationsAssignment_10_1_0() { return cDeclarationsAssignment_10_1_0; }
		
		//Declar
		public RuleCall getDeclarationsDeclarParserRuleCall_10_1_0_0() { return cDeclarationsDeclarParserRuleCall_10_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10_1_1() { return cSemicolonKeyword_10_1_1; }
		
		//('Preconditions' (preconditions+=Proposition ';')*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'Preconditions'
		public Keyword getPreconditionsKeyword_11_0() { return cPreconditionsKeyword_11_0; }
		
		//(preconditions+=Proposition ';')*
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//preconditions+=Proposition
		public Assignment getPreconditionsAssignment_11_1_0() { return cPreconditionsAssignment_11_1_0; }
		
		//Proposition
		public RuleCall getPreconditionsPropositionParserRuleCall_11_1_0_0() { return cPreconditionsPropositionParserRuleCall_11_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11_1_1() { return cSemicolonKeyword_11_1_1; }
		
		//('Postconditions' (postconditions+=Proposition ';')*)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'Postconditions'
		public Keyword getPostconditionsKeyword_12_0() { return cPostconditionsKeyword_12_0; }
		
		//(postconditions+=Proposition ';')*
		public Group getGroup_12_1() { return cGroup_12_1; }
		
		//postconditions+=Proposition
		public Assignment getPostconditionsAssignment_12_1_0() { return cPostconditionsAssignment_12_1_0; }
		
		//Proposition
		public RuleCall getPostconditionsPropositionParserRuleCall_12_1_0_0() { return cPostconditionsPropositionParserRuleCall_12_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_12_1_1() { return cSemicolonKeyword_12_1_1; }
		
		//('Obligations' (obligations+=Obligation ';')*)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'Obligations'
		public Keyword getObligationsKeyword_13_0() { return cObligationsKeyword_13_0; }
		
		//(obligations+=Obligation ';')*
		public Group getGroup_13_1() { return cGroup_13_1; }
		
		//obligations+=Obligation
		public Assignment getObligationsAssignment_13_1_0() { return cObligationsAssignment_13_1_0; }
		
		//Obligation
		public RuleCall getObligationsObligationParserRuleCall_13_1_0_0() { return cObligationsObligationParserRuleCall_13_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_13_1_1() { return cSemicolonKeyword_13_1_1; }
		
		//('SurvivingObligations' (sobligations+=Obligation ';')*)?
		public Group getGroup_14() { return cGroup_14; }
		
		//'SurvivingObligations'
		public Keyword getSurvivingObligationsKeyword_14_0() { return cSurvivingObligationsKeyword_14_0; }
		
		//(sobligations+=Obligation ';')*
		public Group getGroup_14_1() { return cGroup_14_1; }
		
		//sobligations+=Obligation
		public Assignment getSobligationsAssignment_14_1_0() { return cSobligationsAssignment_14_1_0; }
		
		//Obligation
		public RuleCall getSobligationsObligationParserRuleCall_14_1_0_0() { return cSobligationsObligationParserRuleCall_14_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14_1_1() { return cSemicolonKeyword_14_1_1; }
		
		//('Powers' (powers+=Power ';')*)?
		public Group getGroup_15() { return cGroup_15; }
		
		//'Powers'
		public Keyword getPowersKeyword_15_0() { return cPowersKeyword_15_0; }
		
		//(powers+=Power ';')*
		public Group getGroup_15_1() { return cGroup_15_1; }
		
		//powers+=Power
		public Assignment getPowersAssignment_15_1_0() { return cPowersAssignment_15_1_0; }
		
		//Power
		public RuleCall getPowersPowerParserRuleCall_15_1_0_0() { return cPowersPowerParserRuleCall_15_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_15_1_1() { return cSemicolonKeyword_15_1_1; }
		
		//('Constraints' (constraints+=Proposition ';')*)?
		public Group getGroup_16() { return cGroup_16; }
		
		//'Constraints'
		public Keyword getConstraintsKeyword_16_0() { return cConstraintsKeyword_16_0; }
		
		//(constraints+=Proposition ';')*
		public Group getGroup_16_1() { return cGroup_16_1; }
		
		//constraints+=Proposition
		public Assignment getConstraintsAssignment_16_1_0() { return cConstraintsAssignment_16_1_0; }
		
		//Proposition
		public RuleCall getConstraintsPropositionParserRuleCall_16_1_0_0() { return cConstraintsPropositionParserRuleCall_16_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_16_1_1() { return cSemicolonKeyword_16_1_1; }
		
		//'endContract'
		public Keyword getEndContractKeyword_17() { return cEndContractKeyword_17; }
	}
	public class DomainConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.DomainConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DomainConcept:
		//	Regular | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Regular | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Regular
		public RuleCall getRegularParserRuleCall_0() { return cRegularParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}
	public class RegularElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Regular");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConceptTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConceptTypeCTypeParserRuleCall_2_0 = (RuleCall)cConceptTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cAttributesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0_0 = (RuleCall)cAttributesAssignment_3_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cAttributesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_3_2_0 = (RuleCall)cAttributesAssignment_3_2.eContents().get(0);
		
		//Regular:
		//	name=ID 'isA' conceptType=CType ('with' (attributes+=Attribute ',')* attributes+=Attribute)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'isA' conceptType=CType ('with' (attributes+=Attribute ',')* attributes+=Attribute)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'isA'
		public Keyword getIsAKeyword_1() { return cIsAKeyword_1; }
		
		//conceptType=CType
		public Assignment getConceptTypeAssignment_2() { return cConceptTypeAssignment_2; }
		
		//CType
		public RuleCall getConceptTypeCTypeParserRuleCall_2_0() { return cConceptTypeCTypeParserRuleCall_2_0; }
		
		//('with' (attributes+=Attribute ',')* attributes+=Attribute)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//(attributes+=Attribute ',')*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_1_0() { return cAttributesAssignment_3_1_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0_0() { return cAttributesAttributeParserRuleCall_3_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_3_1_1() { return cCommaKeyword_3_1_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_2() { return cAttributesAssignment_3_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_2_0() { return cAttributesAttributeParserRuleCall_3_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeTypeCTypeParserRuleCall_2_0 = (RuleCall)cAttributeTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID ':' attributeType=CType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' attributeType=CType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//attributeType=CType
		public Assignment getAttributeTypeAssignment_2() { return cAttributeTypeAssignment_2; }
		
		//CType
		public RuleCall getAttributeTypeCTypeParserRuleCall_2_0() { return cAttributeTypeCTypeParserRuleCall_2_0; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEnumerationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEnumerationItemsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEnumerationItemsEnumItemParserRuleCall_4_0_0 = (RuleCall)cEnumerationItemsAssignment_4_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEnumerationItemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnumerationItemsEnumItemParserRuleCall_5_0 = (RuleCall)cEnumerationItemsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Enumeration:
		//	name=ID 'isA' 'Enumeration' '(' (enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'isA' 'Enumeration' '(' (enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'isA'
		public Keyword getIsAKeyword_1() { return cIsAKeyword_1; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_2() { return cEnumerationKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(enumerationItems+=enumItem ',')*
		public Group getGroup_4() { return cGroup_4; }
		
		//enumerationItems+=enumItem
		public Assignment getEnumerationItemsAssignment_4_0() { return cEnumerationItemsAssignment_4_0; }
		
		//enumItem
		public RuleCall getEnumerationItemsEnumItemParserRuleCall_4_0_0() { return cEnumerationItemsEnumItemParserRuleCall_4_0_0; }
		
		//','
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }
		
		//enumerationItems+=enumItem
		public Assignment getEnumerationItemsAssignment_5() { return cEnumerationItemsAssignment_5; }
		
		//enumItem
		public RuleCall getEnumerationItemsEnumItemParserRuleCall_5_0() { return cEnumerationItemsEnumItemParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EnumItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.enumItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumItemAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//enumItem:
		//	{enumItem} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{enumItem} name=ID
		public Group getGroup() { return cGroup; }
		
		//{enumItem}
		public Action getEnumItemAction_0() { return cEnumItemAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.CType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOntoCTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CType:
		//	DomainType | OntoCType | BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//DomainType | OntoCType | BasicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DomainType
		public RuleCall getDomainTypeParserRuleCall_0() { return cDomainTypeParserRuleCall_0; }
		
		//OntoCType
		public RuleCall getOntoCTypeParserRuleCall_1() { return cOntoCTypeParserRuleCall_1; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_2() { return cBasicTypeParserRuleCall_2; }
	}
	public class DomainTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.DomainType");
		private final Assignment cSuperTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperTypeDomainConceptCrossReference_0 = (CrossReference)cSuperTypeAssignment.eContents().get(0);
		private final RuleCall cSuperTypeDomainConceptIDTerminalRuleCall_0_1 = (RuleCall)cSuperTypeDomainConceptCrossReference_0.eContents().get(1);
		
		//DomainType:
		//	superType=[DomainConcept];
		@Override public ParserRule getRule() { return rule; }
		
		//superType=[DomainConcept]
		public Assignment getSuperTypeAssignment() { return cSuperTypeAssignment; }
		
		//[DomainConcept]
		public CrossReference getSuperTypeDomainConceptCrossReference_0() { return cSuperTypeDomainConceptCrossReference_0; }
		
		//ID
		public RuleCall getSuperTypeDomainConceptIDTerminalRuleCall_0_1() { return cSuperTypeDomainConceptIDTerminalRuleCall_0_1; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.BasicType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameNUMBERKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameSTRINGKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameDATEKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		
		//BasicType:
		//	name=('NUMBER' | 'STRING' | 'DATE');
		@Override public ParserRule getRule() { return rule; }
		
		//name=('NUMBER' | 'STRING' | 'DATE')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('NUMBER' | 'STRING' | 'DATE')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'NUMBER'
		public Keyword getNameNUMBERKeyword_0_0() { return cNameNUMBERKeyword_0_0; }
		
		//'STRING'
		public Keyword getNameSTRINGKeyword_0_1() { return cNameSTRINGKeyword_0_1; }
		
		//'DATE'
		public Keyword getNameDATEKeyword_0_2() { return cNameDATEKeyword_0_2; }
	}
	public class OntoCTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.OntoCType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameASSETKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameEVENTKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameROLEKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameSITUATIONKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameCONTRACTKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		
		//OntoCType:
		//	name=('ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT');
		@Override public ParserRule getRule() { return rule; }
		
		//name=('ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'ASSET'
		public Keyword getNameASSETKeyword_0_0() { return cNameASSETKeyword_0_0; }
		
		//'EVENT'
		public Keyword getNameEVENTKeyword_0_1() { return cNameEVENTKeyword_0_1; }
		
		//'ROLE'
		public Keyword getNameROLEKeyword_0_2() { return cNameROLEKeyword_0_2; }
		
		//'SITUATION'
		public Keyword getNameSITUATIONKeyword_0_3() { return cNameSITUATIONKeyword_0_3; }
		
		//'CONTRACT'
		public Keyword getNameCONTRACTKeyword_0_4() { return cNameCONTRACTKeyword_0_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ID ':' type=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=TypeName
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_2_0() { return cTypeTypeNameParserRuleCall_2_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasicTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeName:
		//	DomainType | BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//DomainType | BasicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DomainType
		public RuleCall getDomainTypeParserRuleCall_0() { return cDomainTypeParserRuleCall_0; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_1() { return cBasicTypeParserRuleCall_1; }
	}
	public class DeclarPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.DeclarPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrIDTerminalRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParamParameterCrossReference_2_0 = (CrossReference)cParamAssignment_2.eContents().get(0);
		private final RuleCall cParamParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cParamParameterCrossReference_2_0.eContents().get(1);
		
		//// can't have param be declar right now because multiple derivation trees
		//DeclarPair:
		//	attr=ID ':=' param=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//attr=ID ':=' param=[Parameter]
		public Group getGroup() { return cGroup; }
		
		//attr=ID
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }
		
		//ID
		public RuleCall getAttrIDTerminalRuleCall_0_0() { return cAttrIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//param=[Parameter]
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//[Parameter]
		public CrossReference getParamParameterCrossReference_2_0() { return cParamParameterCrossReference_2_0; }
		
		//ID
		public RuleCall getParamParameterIDTerminalRuleCall_2_0_1() { return cParamParameterIDTerminalRuleCall_2_0_1; }
	}
	public class DeclarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Declar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRegularCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRegularIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeRegularCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAttributesDeclarPairParserRuleCall_4_0_0 = (RuleCall)cAttributesAssignment_4_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesDeclarPairParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		
		//Declar:
		//	name=ID ':' type=[Regular] 'with' (attributes+=DeclarPair ',')* attributes+=DeclarPair;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Regular] 'with' (attributes+=DeclarPair ',')* attributes+=DeclarPair
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[Regular]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Regular]
		public CrossReference getTypeRegularCrossReference_2_0() { return cTypeRegularCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeRegularIDTerminalRuleCall_2_0_1() { return cTypeRegularIDTerminalRuleCall_2_0_1; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//(attributes+=DeclarPair ',')*
		public Group getGroup_4() { return cGroup_4; }
		
		//attributes+=DeclarPair
		public Assignment getAttributesAssignment_4_0() { return cAttributesAssignment_4_0; }
		
		//DeclarPair
		public RuleCall getAttributesDeclarPairParserRuleCall_4_0_0() { return cAttributesDeclarPairParserRuleCall_4_0_0; }
		
		//','
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }
		
		//attributes+=DeclarPair
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//DeclarPair
		public RuleCall getAttributesDeclarPairParserRuleCall_5_0() { return cAttributesDeclarPairParserRuleCall_5_0; }
	}
	public class ObligationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Obligation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTriggerPropositionParserRuleCall_2_0_0 = (RuleCall)cTriggerAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cObligationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRole1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRole1IDTerminalRuleCall_5_0 = (RuleCall)cRole1Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRole2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRole2IDTerminalRuleCall_7_0 = (RuleCall)cRole2Assignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAntecedentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAntecedentPropositionParserRuleCall_9_0 = (RuleCall)cAntecedentAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConsequentAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConsequentPropositionParserRuleCall_11_0 = (RuleCall)cConsequentAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Obligation:
		//	name=ID ':' (trigger=Proposition '->')? 'obligation' '(' role1=ID ',' role2=ID ',' antecedent=Proposition ','
		//	consequent=Proposition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (trigger=Proposition '->')? 'obligation' '(' role1=ID ',' role2=ID ',' antecedent=Proposition ','
		//consequent=Proposition ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(trigger=Proposition '->')?
		public Group getGroup_2() { return cGroup_2; }
		
		//trigger=Proposition
		public Assignment getTriggerAssignment_2_0() { return cTriggerAssignment_2_0; }
		
		//Proposition
		public RuleCall getTriggerPropositionParserRuleCall_2_0_0() { return cTriggerPropositionParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//'obligation'
		public Keyword getObligationKeyword_3() { return cObligationKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//role1=ID
		public Assignment getRole1Assignment_5() { return cRole1Assignment_5; }
		
		//ID
		public RuleCall getRole1IDTerminalRuleCall_5_0() { return cRole1IDTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//role2=ID
		public Assignment getRole2Assignment_7() { return cRole2Assignment_7; }
		
		//ID
		public RuleCall getRole2IDTerminalRuleCall_7_0() { return cRole2IDTerminalRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//antecedent=Proposition
		public Assignment getAntecedentAssignment_9() { return cAntecedentAssignment_9; }
		
		//Proposition
		public RuleCall getAntecedentPropositionParserRuleCall_9_0() { return cAntecedentPropositionParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//consequent=Proposition
		public Assignment getConsequentAssignment_11() { return cConsequentAssignment_11; }
		
		//Proposition
		public RuleCall getConsequentPropositionParserRuleCall_11_0() { return cConsequentPropositionParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTriggerPropositionParserRuleCall_2_0_0 = (RuleCall)cTriggerAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPowerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRole1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRole1IDTerminalRuleCall_5_0 = (RuleCall)cRole1Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRole2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRole2IDTerminalRuleCall_7_0 = (RuleCall)cRole2Assignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAntecedentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAntecedentPropositionParserRuleCall_9_0 = (RuleCall)cAntecedentAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConsequentAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConsequentPropositionParserRuleCall_11_0 = (RuleCall)cConsequentAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Power:
		//	name=ID ':' (trigger=Proposition '->')? 'power' '(' role1=ID ',' role2=ID ',' antecedent=Proposition ','
		//	consequent=Proposition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (trigger=Proposition '->')? 'power' '(' role1=ID ',' role2=ID ',' antecedent=Proposition ','
		//consequent=Proposition ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(trigger=Proposition '->')?
		public Group getGroup_2() { return cGroup_2; }
		
		//trigger=Proposition
		public Assignment getTriggerAssignment_2_0() { return cTriggerAssignment_2_0; }
		
		//Proposition
		public RuleCall getTriggerPropositionParserRuleCall_2_0_0() { return cTriggerPropositionParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//'power'
		public Keyword getPowerKeyword_3() { return cPowerKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//role1=ID
		public Assignment getRole1Assignment_5() { return cRole1Assignment_5; }
		
		//ID
		public RuleCall getRole1IDTerminalRuleCall_5_0() { return cRole1IDTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//role2=ID
		public Assignment getRole2Assignment_7() { return cRole2Assignment_7; }
		
		//ID
		public RuleCall getRole2IDTerminalRuleCall_7_0() { return cRole2IDTerminalRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//antecedent=Proposition
		public Assignment getAntecedentAssignment_9() { return cAntecedentAssignment_9; }
		
		//Proposition
		public RuleCall getAntecedentPropositionParserRuleCall_9_0() { return cAntecedentPropositionParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//consequent=Proposition
		public Assignment getConsequentAssignment_11() { return cConsequentAssignment_11; }
		
		//Proposition
		public RuleCall getConsequentPropositionParserRuleCall_11_0() { return cConsequentPropositionParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Proposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJunctionsJunctionParserRuleCall_0_0 = (RuleCall)cJunctionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cJunctionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJunctionsJunctionParserRuleCall_1_1_0 = (RuleCall)cJunctionsAssignment_1_1.eContents().get(0);
		
		//Proposition:
		//	junctions+=Junction ('OR' junctions+=Junction)*;
		@Override public ParserRule getRule() { return rule; }
		
		//junctions+=Junction ('OR' junctions+=Junction)*
		public Group getGroup() { return cGroup; }
		
		//junctions+=Junction
		public Assignment getJunctionsAssignment_0() { return cJunctionsAssignment_0; }
		
		//Junction
		public RuleCall getJunctionsJunctionParserRuleCall_0_0() { return cJunctionsJunctionParserRuleCall_0_0; }
		
		//('OR' junctions+=Junction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//junctions+=Junction
		public Assignment getJunctionsAssignment_1_1() { return cJunctionsAssignment_1_1; }
		
		//Junction
		public RuleCall getJunctionsJunctionParserRuleCall_1_1_0() { return cJunctionsJunctionParserRuleCall_1_1_0; }
	}
	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Junction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativeAtomsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegativeAtomsNegationParserRuleCall_0_0 = (RuleCall)cNegativeAtomsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNegativeAtomsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNegativeAtomsNegationParserRuleCall_1_1_0 = (RuleCall)cNegativeAtomsAssignment_1_1.eContents().get(0);
		
		//Junction:
		//	negativeAtoms+=Negation ('AND' negativeAtoms+=Negation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//negativeAtoms+=Negation ('AND' negativeAtoms+=Negation)*
		public Group getGroup() { return cGroup; }
		
		//negativeAtoms+=Negation
		public Assignment getNegativeAtomsAssignment_0() { return cNegativeAtomsAssignment_0; }
		
		//Negation
		public RuleCall getNegativeAtomsNegationParserRuleCall_0_0() { return cNegativeAtomsNegationParserRuleCall_0_0; }
		
		//('AND' negativeAtoms+=Negation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//negativeAtoms+=Negation
		public Assignment getNegativeAtomsAssignment_1_1() { return cNegativeAtomsAssignment_1_1; }
		
		//Negation
		public RuleCall getNegativeAtomsNegationParserRuleCall_1_1_0() { return cNegativeAtomsNegationParserRuleCall_1_1_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNOTKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cAtomicExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomicExpressionAtomParserRuleCall_1_0 = (RuleCall)cAtomicExpressionAssignment_1.eContents().get(0);
		
		//Negation:
		//	negated?='NOT'? atomicExpression=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//negated?='NOT'? atomicExpression=Atom
		public Group getGroup() { return cGroup; }
		
		//negated?='NOT'?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }
		
		//'NOT'
		public Keyword getNegatedNOTKeyword_0_0() { return cNegatedNOTKeyword_0_0; }
		
		//atomicExpression=Atom
		public Assignment getAtomicExpressionAssignment_1() { return cAtomicExpressionAssignment_1; }
		
		//Atom
		public RuleCall getAtomicExpressionAtomParserRuleCall_1_0() { return cAtomicExpressionAtomParserRuleCall_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHappensKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventPropositionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEventPropositionEventPropParserRuleCall_0_2_0 = (RuleCall)cEventPropositionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOccursKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSituationPropositionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSituationPropositionSitPropParserRuleCall_1_2_0 = (RuleCall)cSituationPropositionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPointAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPointPointParserRuleCall_2_0_0 = (RuleCall)cPointAssignment_2_0.eContents().get(0);
		private final Keyword cWithinKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIntervalAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIntervalIntervalParserRuleCall_2_2_0 = (RuleCall)cIntervalAssignment_2_2.eContents().get(0);
		private final Assignment cBoolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cBoolTRUEKeyword_3_0 = (Keyword)cBoolAssignment_3.eContents().get(0);
		private final Assignment cBoolAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cBoolFALSEKeyword_4_0 = (Keyword)cBoolAssignment_4.eContents().get(0);
		
		//Atom:
		//	'happens' '(' eventProposition=EventProp ')'
		//	| 'occurs' '(' situationProposition=SitProp ')'
		//	| point=Point 'within' interval=Interval
		//	| bool='TRUE'
		//	| bool='FALSE';
		@Override public ParserRule getRule() { return rule; }
		
		//'happens' '(' eventProposition=EventProp ')' | 'occurs' '(' situationProposition=SitProp ')' | point=Point 'within'
		//interval=Interval | bool='TRUE' | bool='FALSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'happens' '(' eventProposition=EventProp ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'happens'
		public Keyword getHappensKeyword_0_0() { return cHappensKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//eventProposition=EventProp
		public Assignment getEventPropositionAssignment_0_2() { return cEventPropositionAssignment_0_2; }
		
		//EventProp
		public RuleCall getEventPropositionEventPropParserRuleCall_0_2_0() { return cEventPropositionEventPropParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'occurs' '(' situationProposition=SitProp ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'occurs'
		public Keyword getOccursKeyword_1_0() { return cOccursKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//situationProposition=SitProp
		public Assignment getSituationPropositionAssignment_1_2() { return cSituationPropositionAssignment_1_2; }
		
		//SitProp
		public RuleCall getSituationPropositionSitPropParserRuleCall_1_2_0() { return cSituationPropositionSitPropParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//point=Point 'within' interval=Interval
		public Group getGroup_2() { return cGroup_2; }
		
		//point=Point
		public Assignment getPointAssignment_2_0() { return cPointAssignment_2_0; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_2_0_0() { return cPointPointParserRuleCall_2_0_0; }
		
		//'within'
		public Keyword getWithinKeyword_2_1() { return cWithinKeyword_2_1; }
		
		//interval=Interval
		public Assignment getIntervalAssignment_2_2() { return cIntervalAssignment_2_2; }
		
		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_2_2_0() { return cIntervalIntervalParserRuleCall_2_2_0; }
		
		//bool='TRUE'
		public Assignment getBoolAssignment_3() { return cBoolAssignment_3; }
		
		//'TRUE'
		public Keyword getBoolTRUEKeyword_3_0() { return cBoolTRUEKeyword_3_0; }
		
		//bool='FALSE'
		public Assignment getBoolAssignment_4() { return cBoolAssignment_4; }
		
		//'FALSE'
		public Keyword getBoolFALSEKeyword_4_0() { return cBoolFALSEKeyword_4_0; }
	}
	public class SitPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.SitProp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSituationNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSituationNameIDTerminalRuleCall_0_0_0 = (RuleCall)cSituationNameAssignment_0_0.eContents().get(0);
		private final Assignment cOSituationNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOSituationNameOStateParserRuleCall_0_1_0 = (RuleCall)cOSituationNameAssignment_0_1.eContents().get(0);
		private final Assignment cCSituationNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cCSituationNameCStateParserRuleCall_0_2_0 = (RuleCall)cCSituationNameAssignment_0_2.eContents().get(0);
		private final Assignment cPSituationNameAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cPSituationNamePStateParserRuleCall_0_3_0 = (RuleCall)cPSituationNameAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalIntervalParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		
		//SitProp:
		//	(situationName=ID
		//	| oSituationName=oState
		//	| cSituationName=cState
		//	| pSituationName=pState) ',' interval=Interval;
		@Override public ParserRule getRule() { return rule; }
		
		//(situationName=ID | oSituationName=oState | cSituationName=cState | pSituationName=pState) ',' interval=Interval
		public Group getGroup() { return cGroup; }
		
		//(situationName=ID | oSituationName=oState | cSituationName=cState | pSituationName=pState)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//situationName=ID
		public Assignment getSituationNameAssignment_0_0() { return cSituationNameAssignment_0_0; }
		
		//ID
		public RuleCall getSituationNameIDTerminalRuleCall_0_0_0() { return cSituationNameIDTerminalRuleCall_0_0_0; }
		
		//oSituationName=oState
		public Assignment getOSituationNameAssignment_0_1() { return cOSituationNameAssignment_0_1; }
		
		//oState
		public RuleCall getOSituationNameOStateParserRuleCall_0_1_0() { return cOSituationNameOStateParserRuleCall_0_1_0; }
		
		//cSituationName=cState
		public Assignment getCSituationNameAssignment_0_2() { return cCSituationNameAssignment_0_2; }
		
		//cState
		public RuleCall getCSituationNameCStateParserRuleCall_0_2_0() { return cCSituationNameCStateParserRuleCall_0_2_0; }
		
		//pSituationName=pState
		public Assignment getPSituationNameAssignment_0_3() { return cPSituationNameAssignment_0_3; }
		
		//pState
		public RuleCall getPSituationNamePStateParserRuleCall_0_3_0() { return cPSituationNamePStateParserRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//interval=Interval
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_2_0() { return cIntervalIntervalParserRuleCall_2_0; }
	}
	public class EventPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.EventProp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cEventNameIDTerminalRuleCall_0_0_0 = (RuleCall)cEventNameAssignment_0_0.eContents().get(0);
		private final Assignment cOEventNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cOEventNameOEventParserRuleCall_0_1_0 = (RuleCall)cOEventNameAssignment_0_1.eContents().get(0);
		private final Assignment cCEventNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cCEventNameCEventParserRuleCall_0_2_0 = (RuleCall)cCEventNameAssignment_0_2.eContents().get(0);
		private final Assignment cPEventNameAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cPEventNamePEventParserRuleCall_0_3_0 = (RuleCall)cPEventNameAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointPointParserRuleCall_2_0 = (RuleCall)cPointAssignment_2.eContents().get(0);
		
		//EventProp:
		//	(eventName=ID
		//	| oEventName=oEvent
		//	| cEventName=cEvent
		//	| pEventName=pEvent) ',' point=Point;
		@Override public ParserRule getRule() { return rule; }
		
		//(eventName=ID | oEventName=oEvent | cEventName=cEvent | pEventName=pEvent) ',' point=Point
		public Group getGroup() { return cGroup; }
		
		//(eventName=ID | oEventName=oEvent | cEventName=cEvent | pEventName=pEvent)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//eventName=ID
		public Assignment getEventNameAssignment_0_0() { return cEventNameAssignment_0_0; }
		
		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0_0_0() { return cEventNameIDTerminalRuleCall_0_0_0; }
		
		//oEventName=oEvent
		public Assignment getOEventNameAssignment_0_1() { return cOEventNameAssignment_0_1; }
		
		//oEvent
		public RuleCall getOEventNameOEventParserRuleCall_0_1_0() { return cOEventNameOEventParserRuleCall_0_1_0; }
		
		//cEventName=cEvent
		public Assignment getCEventNameAssignment_0_2() { return cCEventNameAssignment_0_2; }
		
		//cEvent
		public RuleCall getCEventNameCEventParserRuleCall_0_2_0() { return cCEventNameCEventParserRuleCall_0_2_0; }
		
		//pEventName=pEvent
		public Assignment getPEventNameAssignment_0_3() { return cPEventNameAssignment_0_3; }
		
		//pEvent
		public RuleCall getPEventNamePEventParserRuleCall_0_3_0() { return cPEventNamePEventParserRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//point=Point
		public Assignment getPointAssignment_2() { return cPointAssignment_2; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_2_0() { return cPointPointParserRuleCall_2_0; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Interval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSituationNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSituationNameSitNameParserRuleCall_0_0 = (RuleCall)cSituationNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStartPointParserRuleCall_1_1_0 = (RuleCall)cStartAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEndAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEndPointParserRuleCall_1_3_0 = (RuleCall)cEndAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cUnnamedAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cUnnamedUNNAMED_INTERVALKeyword_2_0 = (Keyword)cUnnamedAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cSituationNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSituationNameSitNameParserRuleCall_3_0_0 = (RuleCall)cSituationNameAssignment_3_0.eContents().get(0);
		private final Assignment cTempOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTempOpTempOpParserRuleCall_3_1_0 = (RuleCall)cTempOpAssignment_3_1.eContents().get(0);
		private final Assignment cIntConstAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIntConstIntConstParserRuleCall_3_2_0 = (RuleCall)cIntConstAssignment_3_2.eContents().get(0);
		private final Assignment cUnitAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUnitUnitParserRuleCall_3_3_0 = (RuleCall)cUnitAssignment_3_3.eContents().get(0);
		
		//Interval:
		//	situationName=SitName | '[' start=Point ',' end=Point ']'
		//	| unnamed='UNNAMED_INTERVAL'
		//	| situationName=SitName tempOp=TempOp intConst=IntConst unit=Unit;
		@Override public ParserRule getRule() { return rule; }
		
		//situationName=SitName | '[' start=Point ',' end=Point ']' | unnamed='UNNAMED_INTERVAL' | situationName=SitName
		//tempOp=TempOp intConst=IntConst unit=Unit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//situationName=SitName
		public Assignment getSituationNameAssignment_0() { return cSituationNameAssignment_0; }
		
		//SitName
		public RuleCall getSituationNameSitNameParserRuleCall_0_0() { return cSituationNameSitNameParserRuleCall_0_0; }
		
		//'[' start=Point ',' end=Point ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//start=Point
		public Assignment getStartAssignment_1_1() { return cStartAssignment_1_1; }
		
		//Point
		public RuleCall getStartPointParserRuleCall_1_1_0() { return cStartPointParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//end=Point
		public Assignment getEndAssignment_1_3() { return cEndAssignment_1_3; }
		
		//Point
		public RuleCall getEndPointParserRuleCall_1_3_0() { return cEndPointParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//unnamed='UNNAMED_INTERVAL'
		public Assignment getUnnamedAssignment_2() { return cUnnamedAssignment_2; }
		
		//'UNNAMED_INTERVAL'
		public Keyword getUnnamedUNNAMED_INTERVALKeyword_2_0() { return cUnnamedUNNAMED_INTERVALKeyword_2_0; }
		
		//situationName=SitName tempOp=TempOp intConst=IntConst unit=Unit
		public Group getGroup_3() { return cGroup_3; }
		
		//situationName=SitName
		public Assignment getSituationNameAssignment_3_0() { return cSituationNameAssignment_3_0; }
		
		//SitName
		public RuleCall getSituationNameSitNameParserRuleCall_3_0_0() { return cSituationNameSitNameParserRuleCall_3_0_0; }
		
		//tempOp=TempOp
		public Assignment getTempOpAssignment_3_1() { return cTempOpAssignment_3_1; }
		
		//TempOp
		public RuleCall getTempOpTempOpParserRuleCall_3_1_0() { return cTempOpTempOpParserRuleCall_3_1_0; }
		
		//intConst=IntConst
		public Assignment getIntConstAssignment_3_2() { return cIntConstAssignment_3_2; }
		
		//IntConst
		public RuleCall getIntConstIntConstParserRuleCall_3_2_0() { return cIntConstIntConstParserRuleCall_3_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_3() { return cUnitAssignment_3_3; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_3_0() { return cUnitUnitParserRuleCall_3_3_0; }
	}
	public class SitNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.SitName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSitNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSitNameIDTerminalRuleCall_0_0 = (RuleCall)cSitNameAssignment_0.eContents().get(0);
		private final Assignment cOStateAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOStateOStateParserRuleCall_1_0 = (RuleCall)cOStateAssignment_1.eContents().get(0);
		private final Assignment cPStateAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPStatePStateParserRuleCall_2_0 = (RuleCall)cPStateAssignment_2.eContents().get(0);
		private final Assignment cCStateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCStateCStateParserRuleCall_3_0 = (RuleCall)cCStateAssignment_3.eContents().get(0);
		private final Assignment cOEventAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOEventOEventParserRuleCall_4_0 = (RuleCall)cOEventAssignment_4.eContents().get(0);
		private final Assignment cCEventAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCEventCEventParserRuleCall_5_0 = (RuleCall)cCEventAssignment_5.eContents().get(0);
		private final Assignment cPEventAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cPEventPEventParserRuleCall_6_0 = (RuleCall)cPEventAssignment_6.eContents().get(0);
		
		//SitName:
		//	SitName=ID | oState=oState | pState=pState | cState=cState
		//	| oEvent=oEvent | cEvent=cEvent | pEvent=pEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//SitName=ID | oState=oState | pState=pState | cState=cState | oEvent=oEvent | cEvent=cEvent | pEvent=pEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SitName=ID
		public Assignment getSitNameAssignment_0() { return cSitNameAssignment_0; }
		
		//ID
		public RuleCall getSitNameIDTerminalRuleCall_0_0() { return cSitNameIDTerminalRuleCall_0_0; }
		
		//oState=oState
		public Assignment getOStateAssignment_1() { return cOStateAssignment_1; }
		
		//oState
		public RuleCall getOStateOStateParserRuleCall_1_0() { return cOStateOStateParserRuleCall_1_0; }
		
		//pState=pState
		public Assignment getPStateAssignment_2() { return cPStateAssignment_2; }
		
		//pState
		public RuleCall getPStatePStateParserRuleCall_2_0() { return cPStatePStateParserRuleCall_2_0; }
		
		//cState=cState
		public Assignment getCStateAssignment_3() { return cCStateAssignment_3; }
		
		//cState
		public RuleCall getCStateCStateParserRuleCall_3_0() { return cCStateCStateParserRuleCall_3_0; }
		
		//oEvent=oEvent
		public Assignment getOEventAssignment_4() { return cOEventAssignment_4; }
		
		//oEvent
		public RuleCall getOEventOEventParserRuleCall_4_0() { return cOEventOEventParserRuleCall_4_0; }
		
		//cEvent=cEvent
		public Assignment getCEventAssignment_5() { return cCEventAssignment_5; }
		
		//cEvent
		public RuleCall getCEventCEventParserRuleCall_5_0() { return cCEventCEventParserRuleCall_5_0; }
		
		//pEvent=pEvent
		public Assignment getPEventAssignment_6() { return cPEventAssignment_6; }
		
		//pEvent
		public RuleCall getPEventPEventParserRuleCall_6_0() { return cPEventPEventParserRuleCall_6_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSECONDSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMINUTESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHOURSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDAYSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWEEKSKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMONTHSKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cQUARTERSKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cYEARSKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Unit:
		//	'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'QUARTERS'
		//	| 'YEARS';
		@Override public ParserRule getRule() { return rule; }
		
		//'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'QUARTERS' | 'YEARS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'SECONDS'
		public Keyword getSECONDSKeyword_0() { return cSECONDSKeyword_0; }
		
		//'MINUTES'
		public Keyword getMINUTESKeyword_1() { return cMINUTESKeyword_1; }
		
		//'HOURS'
		public Keyword getHOURSKeyword_2() { return cHOURSKeyword_2; }
		
		//'DAYS'
		public Keyword getDAYSKeyword_3() { return cDAYSKeyword_3; }
		
		//'WEEKS'
		public Keyword getWEEKSKeyword_4() { return cWEEKSKeyword_4; }
		
		//'MONTHS'
		public Keyword getMONTHSKeyword_5() { return cMONTHSKeyword_5; }
		
		//'QUARTERS'
		public Keyword getQUARTERSKeyword_6() { return cQUARTERSKeyword_6; }
		
		//'YEARS'
		public Keyword getYEARSKeyword_7() { return cYEARSKeyword_7; }
	}
	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeINTTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//IntConst:
		//	{IntConst} Type=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConst} Type=INT
		public Group getGroup() { return cGroup; }
		
		//{IntConst}
		public Action getIntConstAction_0() { return cIntConstAction_0; }
		
		//Type=INT
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_1_0() { return cTypeINTTerminalRuleCall_1_0; }
	}
	public class TempOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.TempOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBEFOREKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAFTERKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cATKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWITHINKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TempOp:
		//	'BEFORE' | 'AFTER' | 'AT' | 'WITHIN' | '+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'BEFORE' | 'AFTER' | 'AT' | 'WITHIN' | '+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BEFORE'
		public Keyword getBEFOREKeyword_0() { return cBEFOREKeyword_0; }
		
		//'AFTER'
		public Keyword getAFTERKeyword_1() { return cAFTERKeyword_1; }
		
		//'AT'
		public Keyword getATKeyword_2() { return cATKeyword_2; }
		
		//'WITHIN'
		public Keyword getWITHINKeyword_3() { return cWITHINKeyword_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.Point");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEventNameSitNameParserRuleCall_0_0 = (RuleCall)cEventNameAssignment_0.eContents().get(0);
		private final Assignment cUnnamedAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cUnnamedUNNAMED_POINTKeyword_1_0 = (Keyword)cUnnamedAssignment_1.eContents().get(0);
		private final Assignment cPointConstAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointConstPointConstParserRuleCall_2_0 = (RuleCall)cPointConstAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPointConstAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPointConstPointConstParserRuleCall_3_0_0 = (RuleCall)cPointConstAssignment_3_0.eContents().get(0);
		private final Assignment cUnitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_3_1_0 = (RuleCall)cUnitAssignment_3_1.eContents().get(0);
		private final Assignment cTempOpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTempOpTempOpParserRuleCall_3_2_0 = (RuleCall)cTempOpAssignment_3_2.eContents().get(0);
		private final Assignment cEventNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEventNameSitNameParserRuleCall_3_3_0 = (RuleCall)cEventNameAssignment_3_3.eContents().get(0);
		
		//Point:
		//	eventName=SitName | unnamed='UNNAMED_POINT' | pointConst=PointConst | pointConst=PointConst unit=Unit tempOp=TempOp
		//	eventName=SitName;
		@Override public ParserRule getRule() { return rule; }
		
		//eventName=SitName | unnamed='UNNAMED_POINT' | pointConst=PointConst | pointConst=PointConst unit=Unit tempOp=TempOp
		//eventName=SitName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eventName=SitName
		public Assignment getEventNameAssignment_0() { return cEventNameAssignment_0; }
		
		//SitName
		public RuleCall getEventNameSitNameParserRuleCall_0_0() { return cEventNameSitNameParserRuleCall_0_0; }
		
		//unnamed='UNNAMED_POINT'
		public Assignment getUnnamedAssignment_1() { return cUnnamedAssignment_1; }
		
		//'UNNAMED_POINT'
		public Keyword getUnnamedUNNAMED_POINTKeyword_1_0() { return cUnnamedUNNAMED_POINTKeyword_1_0; }
		
		//pointConst=PointConst
		public Assignment getPointConstAssignment_2() { return cPointConstAssignment_2; }
		
		//PointConst
		public RuleCall getPointConstPointConstParserRuleCall_2_0() { return cPointConstPointConstParserRuleCall_2_0; }
		
		//pointConst=PointConst unit=Unit tempOp=TempOp eventName=SitName
		public Group getGroup_3() { return cGroup_3; }
		
		//pointConst=PointConst
		public Assignment getPointConstAssignment_3_0() { return cPointConstAssignment_3_0; }
		
		//PointConst
		public RuleCall getPointConstPointConstParserRuleCall_3_0_0() { return cPointConstPointConstParserRuleCall_3_0_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1() { return cUnitAssignment_3_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_0() { return cUnitUnitParserRuleCall_3_1_0; }
		
		//tempOp=TempOp
		public Assignment getTempOpAssignment_3_2() { return cTempOpAssignment_3_2; }
		
		//TempOp
		public RuleCall getTempOpTempOpParserRuleCall_3_2_0() { return cTempOpTempOpParserRuleCall_3_2_0; }
		
		//eventName=SitName
		public Assignment getEventNameAssignment_3_3() { return cEventNameAssignment_3_3; }
		
		//SitName
		public RuleCall getEventNameSitNameParserRuleCall_3_3_0() { return cEventNameSitNameParserRuleCall_3_3_0; }
	}
	public class PEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.pEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPowEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPowEventPowEventParserRuleCall_0_0 = (RuleCall)cPowEventAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPowNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPowNameIDTerminalRuleCall_2_0 = (RuleCall)cPowNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//pEvent:
		//	powEvent=PowEvent '(' powName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//powEvent=PowEvent '(' powName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//powEvent=PowEvent
		public Assignment getPowEventAssignment_0() { return cPowEventAssignment_0; }
		
		//PowEvent
		public RuleCall getPowEventPowEventParserRuleCall_0_0() { return cPowEventPowEventParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//powName=ID
		public Assignment getPowNameAssignment_2() { return cPowNameAssignment_2; }
		
		//ID
		public RuleCall getPowNameIDTerminalRuleCall_2_0() { return cPowNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PowEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.PowEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPTRIGGEREDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPACTIVATEDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPSUSPENDEDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPRESUMEDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPEXERTEDKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPEXPIREDKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPTERMINATEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//PowEvent:
		//	'pTRIGGERED' | 'pACTIVATED' | 'pSUSPENDED' | 'pRESUMED' | 'pEXERTED'
		//	| 'pEXPIRED' | 'pTERMINATED';
		@Override public ParserRule getRule() { return rule; }
		
		//'pTRIGGERED' | 'pACTIVATED' | 'pSUSPENDED' | 'pRESUMED' | 'pEXERTED' | 'pEXPIRED' | 'pTERMINATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pTRIGGERED'
		public Keyword getPTRIGGEREDKeyword_0() { return cPTRIGGEREDKeyword_0; }
		
		//'pACTIVATED'
		public Keyword getPACTIVATEDKeyword_1() { return cPACTIVATEDKeyword_1; }
		
		//'pSUSPENDED'
		public Keyword getPSUSPENDEDKeyword_2() { return cPSUSPENDEDKeyword_2; }
		
		//'pRESUMED'
		public Keyword getPRESUMEDKeyword_3() { return cPRESUMEDKeyword_3; }
		
		//'pEXERTED'
		public Keyword getPEXERTEDKeyword_4() { return cPEXERTEDKeyword_4; }
		
		//'pEXPIRED'
		public Keyword getPEXPIREDKeyword_5() { return cPEXPIREDKeyword_5; }
		
		//'pTERMINATED'
		public Keyword getPTERMINATEDKeyword_6() { return cPTERMINATEDKeyword_6; }
	}
	public class CEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.cEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContrEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContrEventContrEventParserRuleCall_0_0 = (RuleCall)cContrEventAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContrNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContrNameIDTerminalRuleCall_2_0 = (RuleCall)cContrNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//cEvent:
		//	contrEvent=ContrEvent '(' contrName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//contrEvent=ContrEvent '(' contrName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//contrEvent=ContrEvent
		public Assignment getContrEventAssignment_0() { return cContrEventAssignment_0; }
		
		//ContrEvent
		public RuleCall getContrEventContrEventParserRuleCall_0_0() { return cContrEventContrEventParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contrName=ID
		public Assignment getContrNameAssignment_2() { return cContrNameAssignment_2; }
		
		//ID
		public RuleCall getContrNameIDTerminalRuleCall_2_0() { return cContrNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContrEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.ContrEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCACTIVATEDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCSUSPENDEDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCRESUMEDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCFULFILLED_ACTIVE_OBLSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCREVOKED_PARTYKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCASSIGNED_PARTYKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCTERMINATEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//ContrEvent:
		//	'cACTIVATED' | 'cSUSPENDED' | 'cRESUMED' | 'cFULFILLED_ACTIVE_OBLS'
		//	| 'cREVOKED_PARTY' | 'cASSIGNED_PARTY' | 'cTERMINATED';
		@Override public ParserRule getRule() { return rule; }
		
		//'cACTIVATED' | 'cSUSPENDED' | 'cRESUMED' | 'cFULFILLED_ACTIVE_OBLS' | 'cREVOKED_PARTY' | 'cASSIGNED_PARTY' |
		//'cTERMINATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cACTIVATED'
		public Keyword getCACTIVATEDKeyword_0() { return cCACTIVATEDKeyword_0; }
		
		//'cSUSPENDED'
		public Keyword getCSUSPENDEDKeyword_1() { return cCSUSPENDEDKeyword_1; }
		
		//'cRESUMED'
		public Keyword getCRESUMEDKeyword_2() { return cCRESUMEDKeyword_2; }
		
		//'cFULFILLED_ACTIVE_OBLS'
		public Keyword getCFULFILLED_ACTIVE_OBLSKeyword_3() { return cCFULFILLED_ACTIVE_OBLSKeyword_3; }
		
		//'cREVOKED_PARTY'
		public Keyword getCREVOKED_PARTYKeyword_4() { return cCREVOKED_PARTYKeyword_4; }
		
		//'cASSIGNED_PARTY'
		public Keyword getCASSIGNED_PARTYKeyword_5() { return cCASSIGNED_PARTYKeyword_5; }
		
		//'cTERMINATED'
		public Keyword getCTERMINATEDKeyword_6() { return cCTERMINATEDKeyword_6; }
	}
	public class OEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.oEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOblEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOblEventOblEventParserRuleCall_0_0 = (RuleCall)cOblEventAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOblNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOblNameIDTerminalRuleCall_2_0 = (RuleCall)cOblNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//oEvent:
		//	oblEvent=OblEvent '(' oblName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//oblEvent=OblEvent '(' oblName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//oblEvent=OblEvent
		public Assignment getOblEventAssignment_0() { return cOblEventAssignment_0; }
		
		//OblEvent
		public RuleCall getOblEventOblEventParserRuleCall_0_0() { return cOblEventOblEventParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//oblName=ID
		public Assignment getOblNameAssignment_2() { return cOblNameAssignment_2; }
		
		//ID
		public RuleCall getOblNameIDTerminalRuleCall_2_0() { return cOblNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OblEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.OblEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOTRIGGEREDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOACTIVATEDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOSUSPENDEDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cORESUMEDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cODISCHARGEDKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOEXPIREDKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOFULFILLEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOVIOLATEDKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOTERMINATEDKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//OblEvent:
		//	'oTRIGGERED' | 'oACTIVATED' | 'oSUSPENDED' | 'oRESUMED' | 'oDISCHARGED'
		//	| 'oEXPIRED' | 'oFULFILLED' | 'oVIOLATED' | 'oTERMINATED';
		@Override public ParserRule getRule() { return rule; }
		
		//'oTRIGGERED' | 'oACTIVATED' | 'oSUSPENDED' | 'oRESUMED' | 'oDISCHARGED' | 'oEXPIRED' | 'oFULFILLED' | 'oVIOLATED' |
		//'oTERMINATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'oTRIGGERED'
		public Keyword getOTRIGGEREDKeyword_0() { return cOTRIGGEREDKeyword_0; }
		
		//'oACTIVATED'
		public Keyword getOACTIVATEDKeyword_1() { return cOACTIVATEDKeyword_1; }
		
		//'oSUSPENDED'
		public Keyword getOSUSPENDEDKeyword_2() { return cOSUSPENDEDKeyword_2; }
		
		//'oRESUMED'
		public Keyword getORESUMEDKeyword_3() { return cORESUMEDKeyword_3; }
		
		//'oDISCHARGED'
		public Keyword getODISCHARGEDKeyword_4() { return cODISCHARGEDKeyword_4; }
		
		//'oEXPIRED'
		public Keyword getOEXPIREDKeyword_5() { return cOEXPIREDKeyword_5; }
		
		//'oFULFILLED'
		public Keyword getOFULFILLEDKeyword_6() { return cOFULFILLEDKeyword_6; }
		
		//'oVIOLATED'
		public Keyword getOVIOLATEDKeyword_7() { return cOVIOLATEDKeyword_7; }
		
		//'oTERMINATED'
		public Keyword getOTERMINATEDKeyword_8() { return cOTERMINATEDKeyword_8; }
	}
	public class PointConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.PointConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeINTTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PointConst:
		//	{PointConst} Type=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{PointConst} Type=INT
		public Group getGroup() { return cGroup; }
		
		//{PointConst}
		public Action getPointConstAction_0() { return cPointConstAction_0; }
		
		//Type=INT
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_1_0() { return cTypeINTTerminalRuleCall_1_0; }
	}
	public class OStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.oState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOblStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOblStateOblStateParserRuleCall_0_0 = (RuleCall)cOblStateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOblNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOblNameIDTerminalRuleCall_2_0 = (RuleCall)cOblNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//oState:
		//	oblState=OblState '(' oblName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//oblState=OblState '(' oblName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//oblState=OblState
		public Assignment getOblStateAssignment_0() { return cOblStateAssignment_0; }
		
		//OblState
		public RuleCall getOblStateOblStateParserRuleCall_0_0() { return cOblStateOblStateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//oblName=ID
		public Assignment getOblNameAssignment_2() { return cOblNameAssignment_2; }
		
		//ID
		public RuleCall getOblNameIDTerminalRuleCall_2_0() { return cOblNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OblStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.OblState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOCREATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOINEFFECTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOSUSPENSIONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOSUCCESSFUL_TERMINATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOUNSUCCESSFUL_TERMINATIONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOVIOLATIONKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOFULFILLMENTKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cODISCHARGEKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//OblState:
		//	'oCREATE' | 'oINEFFECT' | 'oSUSPENSION' | 'oSUCCESSFUL_TERMINATION'
		//	| 'oUNSUCCESSFUL_TERMINATION' | 'oVIOLATION' | 'oFULFILLMENT' | 'oDISCHARGE';
		@Override public ParserRule getRule() { return rule; }
		
		//'oCREATE' | 'oINEFFECT' | 'oSUSPENSION' | 'oSUCCESSFUL_TERMINATION' | 'oUNSUCCESSFUL_TERMINATION' | 'oVIOLATION' |
		//'oFULFILLMENT' | 'oDISCHARGE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'oCREATE'
		public Keyword getOCREATEKeyword_0() { return cOCREATEKeyword_0; }
		
		//'oINEFFECT'
		public Keyword getOINEFFECTKeyword_1() { return cOINEFFECTKeyword_1; }
		
		//'oSUSPENSION'
		public Keyword getOSUSPENSIONKeyword_2() { return cOSUSPENSIONKeyword_2; }
		
		//'oSUCCESSFUL_TERMINATION'
		public Keyword getOSUCCESSFUL_TERMINATIONKeyword_3() { return cOSUCCESSFUL_TERMINATIONKeyword_3; }
		
		//'oUNSUCCESSFUL_TERMINATION'
		public Keyword getOUNSUCCESSFUL_TERMINATIONKeyword_4() { return cOUNSUCCESSFUL_TERMINATIONKeyword_4; }
		
		//'oVIOLATION'
		public Keyword getOVIOLATIONKeyword_5() { return cOVIOLATIONKeyword_5; }
		
		//'oFULFILLMENT'
		public Keyword getOFULFILLMENTKeyword_6() { return cOFULFILLMENTKeyword_6; }
		
		//'oDISCHARGE'
		public Keyword getODISCHARGEKeyword_7() { return cODISCHARGEKeyword_7; }
	}
	public class CStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.cState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContrStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContrStateContrStateParserRuleCall_0_0 = (RuleCall)cContrStateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContractNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContractNameIDTerminalRuleCall_2_0 = (RuleCall)cContractNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//cState:
		//	contrState=ContrState '(' contractName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//contrState=ContrState '(' contractName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//contrState=ContrState
		public Assignment getContrStateAssignment_0() { return cContrStateAssignment_0; }
		
		//ContrState
		public RuleCall getContrStateContrStateParserRuleCall_0_0() { return cContrStateContrStateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contractName=ID
		public Assignment getContractNameAssignment_2() { return cContractNameAssignment_2; }
		
		//ID
		public RuleCall getContractNameIDTerminalRuleCall_2_0() { return cContractNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContrStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.ContrState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCFORMKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCINEFFECTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCSUSPENSIONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCSUCCESSFUL_TERMINATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCUNSECCESSFUL_TERMINATIONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCUNASSIGNKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ContrState:
		//	'cFORM' | 'cINEFFECT' | 'cSUSPENSION' | 'cSUCCESSFUL_TERMINATION'
		//	| 'cUNSECCESSFUL_TERMINATION' | 'cUNASSIGN';
		@Override public ParserRule getRule() { return rule; }
		
		//'cFORM' | 'cINEFFECT' | 'cSUSPENSION' | 'cSUCCESSFUL_TERMINATION' | 'cUNSECCESSFUL_TERMINATION' | 'cUNASSIGN'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cFORM'
		public Keyword getCFORMKeyword_0() { return cCFORMKeyword_0; }
		
		//'cINEFFECT'
		public Keyword getCINEFFECTKeyword_1() { return cCINEFFECTKeyword_1; }
		
		//'cSUSPENSION'
		public Keyword getCSUSPENSIONKeyword_2() { return cCSUSPENSIONKeyword_2; }
		
		//'cSUCCESSFUL_TERMINATION'
		public Keyword getCSUCCESSFUL_TERMINATIONKeyword_3() { return cCSUCCESSFUL_TERMINATIONKeyword_3; }
		
		//'cUNSECCESSFUL_TERMINATION'
		public Keyword getCUNSECCESSFUL_TERMINATIONKeyword_4() { return cCUNSECCESSFUL_TERMINATIONKeyword_4; }
		
		//'cUNASSIGN'
		public Keyword getCUNASSIGNKeyword_5() { return cCUNASSIGNKeyword_5; }
	}
	public class PStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.pState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPowStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPowStatePowStateParserRuleCall_0_0 = (RuleCall)cPowStateAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPowNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPowNameIDTerminalRuleCall_2_0 = (RuleCall)cPowNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//pState:
		//	powState=PowState '(' powName=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//powState=PowState '(' powName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//powState=PowState
		public Assignment getPowStateAssignment_0() { return cPowStateAssignment_0; }
		
		//PowState
		public RuleCall getPowStatePowStateParserRuleCall_0_0() { return cPowStatePowStateParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//powName=ID
		public Assignment getPowNameAssignment_2() { return cPowNameAssignment_2; }
		
		//ID
		public RuleCall getPowNameIDTerminalRuleCall_2_0() { return cPowNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PowStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.symg.Symg.PowState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPCREATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPINEFFECTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPSUSPENSIONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPSUCCESSFUL_TERMINATIONKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPUNSUCCESSFUL_TERMINATIONKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//PowState:
		//	'pCREATE' | 'pINEFFECT' | 'pSUSPENSION' | 'pSUCCESSFUL_TERMINATION'
		//	| 'pUNSUCCESSFUL_TERMINATION';
		@Override public ParserRule getRule() { return rule; }
		
		//'pCREATE' | 'pINEFFECT' | 'pSUSPENSION' | 'pSUCCESSFUL_TERMINATION' | 'pUNSUCCESSFUL_TERMINATION'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pCREATE'
		public Keyword getPCREATEKeyword_0() { return cPCREATEKeyword_0; }
		
		//'pINEFFECT'
		public Keyword getPINEFFECTKeyword_1() { return cPINEFFECTKeyword_1; }
		
		//'pSUSPENSION'
		public Keyword getPSUSPENSIONKeyword_2() { return cPSUSPENSIONKeyword_2; }
		
		//'pSUCCESSFUL_TERMINATION'
		public Keyword getPSUCCESSFUL_TERMINATIONKeyword_3() { return cPSUCCESSFUL_TERMINATIONKeyword_3; }
		
		//'pUNSUCCESSFUL_TERMINATION'
		public Keyword getPUNSUCCESSFUL_TERMINATIONKeyword_4() { return cPUNSUCCESSFUL_TERMINATIONKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final DomainConceptElements pDomainConcept;
	private final RegularElements pRegular;
	private final AttributeElements pAttribute;
	private final EnumerationElements pEnumeration;
	private final EnumItemElements pEnumItem;
	private final CTypeElements pCType;
	private final DomainTypeElements pDomainType;
	private final BasicTypeElements pBasicType;
	private final OntoCTypeElements pOntoCType;
	private final ParameterElements pParameter;
	private final TypeNameElements pTypeName;
	private final DeclarPairElements pDeclarPair;
	private final DeclarElements pDeclar;
	private final ObligationElements pObligation;
	private final PowerElements pPower;
	private final PropositionElements pProposition;
	private final JunctionElements pJunction;
	private final NegationElements pNegation;
	private final AtomElements pAtom;
	private final SitPropElements pSitProp;
	private final EventPropElements pEventProp;
	private final IntervalElements pInterval;
	private final SitNameElements pSitName;
	private final UnitElements pUnit;
	private final IntConstElements pIntConst;
	private final TempOpElements pTempOp;
	private final PointElements pPoint;
	private final PEventElements pPEvent;
	private final PowEventElements pPowEvent;
	private final CEventElements pCEvent;
	private final ContrEventElements pContrEvent;
	private final OEventElements pOEvent;
	private final OblEventElements pOblEvent;
	private final PointConstElements pPointConst;
	private final OStateElements pOState;
	private final OblStateElements pOblState;
	private final CStateElements pCState;
	private final ContrStateElements pContrState;
	private final PStateElements pPState;
	private final PowStateElements pPowState;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SymgGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDomainConcept = new DomainConceptElements();
		this.pRegular = new RegularElements();
		this.pAttribute = new AttributeElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumItem = new EnumItemElements();
		this.pCType = new CTypeElements();
		this.pDomainType = new DomainTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pOntoCType = new OntoCTypeElements();
		this.pParameter = new ParameterElements();
		this.pTypeName = new TypeNameElements();
		this.pDeclarPair = new DeclarPairElements();
		this.pDeclar = new DeclarElements();
		this.pObligation = new ObligationElements();
		this.pPower = new PowerElements();
		this.pProposition = new PropositionElements();
		this.pJunction = new JunctionElements();
		this.pNegation = new NegationElements();
		this.pAtom = new AtomElements();
		this.pSitProp = new SitPropElements();
		this.pEventProp = new EventPropElements();
		this.pInterval = new IntervalElements();
		this.pSitName = new SitNameElements();
		this.pUnit = new UnitElements();
		this.pIntConst = new IntConstElements();
		this.pTempOp = new TempOpElements();
		this.pPoint = new PointElements();
		this.pPEvent = new PEventElements();
		this.pPowEvent = new PowEventElements();
		this.pCEvent = new CEventElements();
		this.pContrEvent = new ContrEventElements();
		this.pOEvent = new OEventElements();
		this.pOblEvent = new OblEventElements();
		this.pPointConst = new PointConstElements();
		this.pOState = new OStateElements();
		this.pOblState = new OblStateElements();
		this.pCState = new CStateElements();
		this.pContrState = new ContrStateElements();
		this.pPState = new PStateElements();
		this.pPowState = new PowStateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.symg.Symg".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Domain' domainName=ID (domainConcepts+=DomainConcept ';')+
	//	'endDomain'
	//	'Contract' contractName=ID '(' (parameters+=Parameter ',')+ parameters+=Parameter ')' ('Declarations'
	//	(declarations+=Declar ';')*)? ('Preconditions' (preconditions+=Proposition ';')*)? ('Postconditions'
	//	(postconditions+=Proposition ';')*)? ('Obligations' (obligations+=Obligation ';')*)? ('SurvivingObligations'
	//	(sobligations+=Obligation ';')*)? ('Powers' (powers+=Power ';')*)? ('Constraints' (constraints+=Proposition ';')*)?
	//	'endContract';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DomainConcept:
	//	Regular | Enumeration;
	public DomainConceptElements getDomainConceptAccess() {
		return pDomainConcept;
	}
	
	public ParserRule getDomainConceptRule() {
		return getDomainConceptAccess().getRule();
	}
	
	//Regular:
	//	name=ID 'isA' conceptType=CType ('with' (attributes+=Attribute ',')* attributes+=Attribute)?;
	public RegularElements getRegularAccess() {
		return pRegular;
	}
	
	public ParserRule getRegularRule() {
		return getRegularAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ':' attributeType=CType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Enumeration:
	//	name=ID 'isA' 'Enumeration' '(' (enumerationItems+=enumItem ',')* enumerationItems+=enumItem ')';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//enumItem:
	//	{enumItem} name=ID;
	public EnumItemElements getEnumItemAccess() {
		return pEnumItem;
	}
	
	public ParserRule getEnumItemRule() {
		return getEnumItemAccess().getRule();
	}
	
	//CType:
	//	DomainType | OntoCType | BasicType;
	public CTypeElements getCTypeAccess() {
		return pCType;
	}
	
	public ParserRule getCTypeRule() {
		return getCTypeAccess().getRule();
	}
	
	//DomainType:
	//	superType=[DomainConcept];
	public DomainTypeElements getDomainTypeAccess() {
		return pDomainType;
	}
	
	public ParserRule getDomainTypeRule() {
		return getDomainTypeAccess().getRule();
	}
	
	//BasicType:
	//	name=('NUMBER' | 'STRING' | 'DATE');
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//OntoCType:
	//	name=('ASSET' | 'EVENT' | 'ROLE' | 'SITUATION' | 'CONTRACT');
	public OntoCTypeElements getOntoCTypeAccess() {
		return pOntoCType;
	}
	
	public ParserRule getOntoCTypeRule() {
		return getOntoCTypeAccess().getRule();
	}
	
	//Parameter:
	//	name=ID ':' type=TypeName;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//TypeName:
	//	DomainType | BasicType;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//// can't have param be declar right now because multiple derivation trees
	//DeclarPair:
	//	attr=ID ':=' param=[Parameter];
	public DeclarPairElements getDeclarPairAccess() {
		return pDeclarPair;
	}
	
	public ParserRule getDeclarPairRule() {
		return getDeclarPairAccess().getRule();
	}
	
	//Declar:
	//	name=ID ':' type=[Regular] 'with' (attributes+=DeclarPair ',')* attributes+=DeclarPair;
	public DeclarElements getDeclarAccess() {
		return pDeclar;
	}
	
	public ParserRule getDeclarRule() {
		return getDeclarAccess().getRule();
	}
	
	//Obligation:
	//	name=ID ':' (trigger=Proposition '->')? 'obligation' '(' role1=ID ',' role2=ID ',' antecedent=Proposition ','
	//	consequent=Proposition ')';
	public ObligationElements getObligationAccess() {
		return pObligation;
	}
	
	public ParserRule getObligationRule() {
		return getObligationAccess().getRule();
	}
	
	//Power:
	//	name=ID ':' (trigger=Proposition '->')? 'power' '(' role1=ID ',' role2=ID ',' antecedent=Proposition ','
	//	consequent=Proposition ')';
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}
	
	//Proposition:
	//	junctions+=Junction ('OR' junctions+=Junction)*;
	public PropositionElements getPropositionAccess() {
		return pProposition;
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}
	
	//Junction:
	//	negativeAtoms+=Negation ('AND' negativeAtoms+=Negation)*;
	public JunctionElements getJunctionAccess() {
		return pJunction;
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}
	
	//Negation:
	//	negated?='NOT'? atomicExpression=Atom;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Atom:
	//	'happens' '(' eventProposition=EventProp ')'
	//	| 'occurs' '(' situationProposition=SitProp ')'
	//	| point=Point 'within' interval=Interval
	//	| bool='TRUE'
	//	| bool='FALSE';
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//SitProp:
	//	(situationName=ID
	//	| oSituationName=oState
	//	| cSituationName=cState
	//	| pSituationName=pState) ',' interval=Interval;
	public SitPropElements getSitPropAccess() {
		return pSitProp;
	}
	
	public ParserRule getSitPropRule() {
		return getSitPropAccess().getRule();
	}
	
	//EventProp:
	//	(eventName=ID
	//	| oEventName=oEvent
	//	| cEventName=cEvent
	//	| pEventName=pEvent) ',' point=Point;
	public EventPropElements getEventPropAccess() {
		return pEventProp;
	}
	
	public ParserRule getEventPropRule() {
		return getEventPropAccess().getRule();
	}
	
	//Interval:
	//	situationName=SitName | '[' start=Point ',' end=Point ']'
	//	| unnamed='UNNAMED_INTERVAL'
	//	| situationName=SitName tempOp=TempOp intConst=IntConst unit=Unit;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//SitName:
	//	SitName=ID | oState=oState | pState=pState | cState=cState
	//	| oEvent=oEvent | cEvent=cEvent | pEvent=pEvent;
	public SitNameElements getSitNameAccess() {
		return pSitName;
	}
	
	public ParserRule getSitNameRule() {
		return getSitNameAccess().getRule();
	}
	
	//Unit:
	//	'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'MONTHS' | 'QUARTERS'
	//	| 'YEARS';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//IntConst:
	//	{IntConst} Type=INT;
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}
	
	//TempOp:
	//	'BEFORE' | 'AFTER' | 'AT' | 'WITHIN' | '+' | '-';
	public TempOpElements getTempOpAccess() {
		return pTempOp;
	}
	
	public ParserRule getTempOpRule() {
		return getTempOpAccess().getRule();
	}
	
	//Point:
	//	eventName=SitName | unnamed='UNNAMED_POINT' | pointConst=PointConst | pointConst=PointConst unit=Unit tempOp=TempOp
	//	eventName=SitName;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//pEvent:
	//	powEvent=PowEvent '(' powName=ID ')';
	public PEventElements getPEventAccess() {
		return pPEvent;
	}
	
	public ParserRule getPEventRule() {
		return getPEventAccess().getRule();
	}
	
	//PowEvent:
	//	'pTRIGGERED' | 'pACTIVATED' | 'pSUSPENDED' | 'pRESUMED' | 'pEXERTED'
	//	| 'pEXPIRED' | 'pTERMINATED';
	public PowEventElements getPowEventAccess() {
		return pPowEvent;
	}
	
	public ParserRule getPowEventRule() {
		return getPowEventAccess().getRule();
	}
	
	//cEvent:
	//	contrEvent=ContrEvent '(' contrName=ID ')';
	public CEventElements getCEventAccess() {
		return pCEvent;
	}
	
	public ParserRule getCEventRule() {
		return getCEventAccess().getRule();
	}
	
	//ContrEvent:
	//	'cACTIVATED' | 'cSUSPENDED' | 'cRESUMED' | 'cFULFILLED_ACTIVE_OBLS'
	//	| 'cREVOKED_PARTY' | 'cASSIGNED_PARTY' | 'cTERMINATED';
	public ContrEventElements getContrEventAccess() {
		return pContrEvent;
	}
	
	public ParserRule getContrEventRule() {
		return getContrEventAccess().getRule();
	}
	
	//oEvent:
	//	oblEvent=OblEvent '(' oblName=ID ')';
	public OEventElements getOEventAccess() {
		return pOEvent;
	}
	
	public ParserRule getOEventRule() {
		return getOEventAccess().getRule();
	}
	
	//OblEvent:
	//	'oTRIGGERED' | 'oACTIVATED' | 'oSUSPENDED' | 'oRESUMED' | 'oDISCHARGED'
	//	| 'oEXPIRED' | 'oFULFILLED' | 'oVIOLATED' | 'oTERMINATED';
	public OblEventElements getOblEventAccess() {
		return pOblEvent;
	}
	
	public ParserRule getOblEventRule() {
		return getOblEventAccess().getRule();
	}
	
	//PointConst:
	//	{PointConst} Type=INT;
	public PointConstElements getPointConstAccess() {
		return pPointConst;
	}
	
	public ParserRule getPointConstRule() {
		return getPointConstAccess().getRule();
	}
	
	//oState:
	//	oblState=OblState '(' oblName=ID ')';
	public OStateElements getOStateAccess() {
		return pOState;
	}
	
	public ParserRule getOStateRule() {
		return getOStateAccess().getRule();
	}
	
	//OblState:
	//	'oCREATE' | 'oINEFFECT' | 'oSUSPENSION' | 'oSUCCESSFUL_TERMINATION'
	//	| 'oUNSUCCESSFUL_TERMINATION' | 'oVIOLATION' | 'oFULFILLMENT' | 'oDISCHARGE';
	public OblStateElements getOblStateAccess() {
		return pOblState;
	}
	
	public ParserRule getOblStateRule() {
		return getOblStateAccess().getRule();
	}
	
	//cState:
	//	contrState=ContrState '(' contractName=ID ')';
	public CStateElements getCStateAccess() {
		return pCState;
	}
	
	public ParserRule getCStateRule() {
		return getCStateAccess().getRule();
	}
	
	//ContrState:
	//	'cFORM' | 'cINEFFECT' | 'cSUSPENSION' | 'cSUCCESSFUL_TERMINATION'
	//	| 'cUNSECCESSFUL_TERMINATION' | 'cUNASSIGN';
	public ContrStateElements getContrStateAccess() {
		return pContrState;
	}
	
	public ParserRule getContrStateRule() {
		return getContrStateAccess().getRule();
	}
	
	//pState:
	//	powState=PowState '(' powName=ID ')';
	public PStateElements getPStateAccess() {
		return pPState;
	}
	
	public ParserRule getPStateRule() {
		return getPStateAccess().getRule();
	}
	
	//PowState:
	//	'pCREATE' | 'pINEFFECT' | 'pSUSPENSION' | 'pSUCCESSFUL_TERMINATION'
	//	| 'pUNSUCCESSFUL_TERMINATION';
	public PowStateElements getPowStateAccess() {
		return pPowState;
	}
	
	public ParserRule getPowStateRule() {
		return getPowStateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
