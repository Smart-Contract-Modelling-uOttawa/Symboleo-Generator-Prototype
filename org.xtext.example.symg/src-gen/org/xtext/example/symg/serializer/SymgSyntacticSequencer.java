/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.symg.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.symg.services.SymgGrammarAccess;

@SuppressWarnings("all")
public class SymgSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SymgGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Model_ConstraintsKeyword_16_0_q;
	protected AbstractElementAlias match_Model_DeclarationsKeyword_10_0_q;
	protected AbstractElementAlias match_Model_ObligationsKeyword_13_0_q;
	protected AbstractElementAlias match_Model_PostconditionsKeyword_12_0_q;
	protected AbstractElementAlias match_Model_PowersKeyword_15_0_q;
	protected AbstractElementAlias match_Model_PreconditionsKeyword_11_0_q;
	protected AbstractElementAlias match_Model___SurvivingKeyword_14_0_ObligationsKeyword_14_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SymgGrammarAccess) access;
		match_Model_ConstraintsKeyword_16_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getConstraintsKeyword_16_0());
		match_Model_DeclarationsKeyword_10_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getDeclarationsKeyword_10_0());
		match_Model_ObligationsKeyword_13_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getObligationsKeyword_13_0());
		match_Model_PostconditionsKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getPostconditionsKeyword_12_0());
		match_Model_PowersKeyword_15_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getPowersKeyword_15_0());
		match_Model_PreconditionsKeyword_11_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getPreconditionsKeyword_11_0());
		match_Model___SurvivingKeyword_14_0_ObligationsKeyword_14_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getSurvivingKeyword_14_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getObligationsKeyword_14_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Model_ConstraintsKeyword_16_0_q.equals(syntax))
				emit_Model_ConstraintsKeyword_16_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_DeclarationsKeyword_10_0_q.equals(syntax))
				emit_Model_DeclarationsKeyword_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_ObligationsKeyword_13_0_q.equals(syntax))
				emit_Model_ObligationsKeyword_13_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_PostconditionsKeyword_12_0_q.equals(syntax))
				emit_Model_PostconditionsKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_PowersKeyword_15_0_q.equals(syntax))
				emit_Model_PowersKeyword_15_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_PreconditionsKeyword_11_0_q.equals(syntax))
				emit_Model_PreconditionsKeyword_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___SurvivingKeyword_14_0_ObligationsKeyword_14_1__q.equals(syntax))
				emit_Model___SurvivingKeyword_14_0_ObligationsKeyword_14_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'Constraints'?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     obligations+=Obligation ';' ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     postconditions+=Proposition ';' 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     powers+=Power ';' (ambiguity) 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     sobligations+=Obligation ';' 'Powers'? (ambiguity) 'endContract' (rule end)
	 */
	protected void emit_Model_ConstraintsKeyword_16_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Declarations'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions' preconditions+=Proposition
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions' postconditions+=Proposition
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations' obligations+=Obligation
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'? 'Surviving' 'Obligations' sobligations+=Obligation
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 */
	protected void emit_Model_DeclarationsKeyword_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Obligations'?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? (ambiguity) 'Surviving' 'Obligations' sobligations+=Obligation
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) 'Surviving' 'Obligations' sobligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     postconditions+=Proposition ';' (ambiguity) 'Surviving' 'Obligations' sobligations+=Obligation
	 *     postconditions+=Proposition ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     postconditions+=Proposition ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     postconditions+=Proposition ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) 'Surviving' 'Obligations' sobligations+=Obligation
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 */
	protected void emit_Model_ObligationsKeyword_13_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Postconditions'?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=Declar ';' 'Preconditions'? (ambiguity) 'Obligations' obligations+=Obligation
	 *     declarations+=Declar ';' 'Preconditions'? (ambiguity) 'Obligations'? 'Surviving' 'Obligations' sobligations+=Obligation
	 *     declarations+=Declar ';' 'Preconditions'? (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     declarations+=Declar ';' 'Preconditions'? (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     declarations+=Declar ';' 'Preconditions'? (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations' obligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'? 'Surviving' 'Obligations' sobligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations' obligations+=Obligation
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'? 'Surviving' 'Obligations' sobligations+=Obligation
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 */
	protected void emit_Model_PostconditionsKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Powers'?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     obligations+=Obligation ';' ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     obligations+=Obligation ';' ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     postconditions+=Proposition ';' 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     postconditions+=Proposition ';' 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     sobligations+=Obligation ';' (ambiguity) 'Constraints' constraints+=Proposition
	 *     sobligations+=Obligation ';' (ambiguity) 'Constraints'? 'endContract' (rule end)
	 */
	protected void emit_Model_PowersKeyword_15_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Preconditions'?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=Declar ';' (ambiguity) 'Postconditions' postconditions+=Proposition
	 *     declarations+=Declar ';' (ambiguity) 'Postconditions'? 'Obligations' obligations+=Obligation
	 *     declarations+=Declar ';' (ambiguity) 'Postconditions'? 'Obligations'? 'Surviving' 'Obligations' sobligations+=Obligation
	 *     declarations+=Declar ';' (ambiguity) 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     declarations+=Declar ';' (ambiguity) 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     declarations+=Declar ';' (ambiguity) 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions' postconditions+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations' obligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'? 'Surviving' 'Obligations' sobligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'? ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 */
	protected void emit_Model_PreconditionsKeyword_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Surviving' 'Obligations')?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? 'Obligations'? (ambiguity) 'Powers' powers+=Power
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? 'Obligations'? (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     declarations+=Declar ';' 'Preconditions'? 'Postconditions'? 'Obligations'? (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     obligations+=Obligation ';' (ambiguity) 'Powers' powers+=Power
	 *     obligations+=Obligation ';' (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     obligations+=Obligation ';' (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'? (ambiguity) 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'? (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'? (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     postconditions+=Proposition ';' 'Obligations'? (ambiguity) 'Powers' powers+=Power
	 *     postconditions+=Proposition ';' 'Obligations'? (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     postconditions+=Proposition ';' 'Obligations'? (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'? (ambiguity) 'Powers' powers+=Power
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'? (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'? (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 */
	protected void emit_Model___SurvivingKeyword_14_0_ObligationsKeyword_14_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
