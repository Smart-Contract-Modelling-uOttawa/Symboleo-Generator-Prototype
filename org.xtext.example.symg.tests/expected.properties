domainLoad=\
## Domain \
ROLE(Seller). \
ROLE(Buyer). \
\
## Contract \
c(X)	:-	initially(meatSaleC(X,_,_,_)). \
\
initially(bind(seller,X))	:-	initially(meatSaleC(_,X,_,_)). \
initially(bind(buyer,X))	:-	initially(meatSaleC(_,_,X,_)). \
initially(form(X))	:-	initially(meatSaleC(_,_,X)). \
\
## Declarations \
\
## Obligations \
\
## Powers \
 \
## Surviving Obligations

domainEnum=\
## Domain \
ROLE(Seller). \
ROLE(Buyer). \
Currency(CAD). \
Currency(USD). \
Currency(EUR). \
 \
MeatQuality(PRIME). \
MeatQuality(AAA). \
MeatQuality(AA). \
MeatQuality(A). \
 \
## Contract \
c(X)	:-	initially(meatSaleC(X,_,_,_,_,_)). \
\
initially(bind(seller,X))	:-	initially(meatSaleC(_,X,_,_,_,_)). \
initially(bind(buyer,X))	:-	initially(meatSaleC(_,_,X,_,_,_)). \
qlt(X)	:-	initially(meatSaleC(_,_,_,X,_,_)). \
curr(X)	:-	initially(meatSaleC(_,_,_,_,X,_)). \
initially(form(X))	:-	initially(meatSaleC(_,_,_,_,X)). \
## Declarations \
## Obligations \
## Powers \
 \
## Surviving Obligations

domainWithSuperType=\
## Domain \
ROLE(Seller). \
ROLE(Buyer). \
Currency(CAD). \
Currency(USD). \
Currency(EUR). \
 \
MeatQuality(PRIME). \
MeatQuality(AAA). \
MeatQuality(AA). \
MeatQuality(A). \
 \
ASSET(X)	:-	PerishableGood(X). \
PerishableGood(X)	:-	Meat(X). \
 \
## Contract \
c(X)	:-	initially(meatSaleC(X,_,_,_,_,_,_)). \
\
initially(bind(seller,X))	:-	initially(meatSaleC(_,X,_,_,_,_,_)). \
initially(bind(buyer,X))	:-	initially(meatSaleC(_,_,X,_,_,_,_)). \
qnt(X)	:-	initially(meatSaleC(_,_,_,X,_,_,_)). \
qlt(X)	:-	initially(meatSaleC(_,_,_,_,X,_,_)). \
curr(X)	:-	initially(meatSaleC(_,_,_,_,_,X,_)). \
initially(form(X))	:-	initially(meatSaleC(_,_,_,_,_,X)). \
 \
## Declarations \
 \
## Obligations \
 \
## Powers \
 \
## Surviving Obligations

loadModel =\
## Domain \
ROLE(Seller). \
ROLE(Buyer). \
Currency(CAD). \
Currency(USD). \
Currency(EUR). \
 \
MeatQuality(PRIME). \
MeatQuality(AAA). \
MeatQuality(AA). \
MeatQuality(A). \
 \
ASSET(X)	:-	PerishableGood(X). \
PerishableGood(X)	:-	Meat(X). \
EVENT(X)	:-	Delivered(X). \
EVENT(X)	:-	Paid(X). \
EVENT(X)	:-	PaidLate(X). \
EVENT(X)	:-	Disclosed(X). \
 \
## Contract \
c(X)	:-	initially(meatSaleC(X,_,_,_,_,_,_,_,_,_,_,_,_)). \
\
initially(bind(seller,X))	:-	initially(meatSaleC(_,X,_,_,_,_,_,_,_,_,_,_,_)). \
initially(bind(buyer,X))	:-	initially(meatSaleC(_,_,X,_,_,_,_,_,_,_,_,_,_)). \
qnt(X)	:-	initially(meatSaleC(_,_,_,X,_,_,_,_,_,_,_,_,_)). \
qlt(X)	:-	initially(meatSaleC(_,_,_,_,X,_,_,_,_,_,_,_,_)). \
amt(X)	:-	initially(meatSaleC(_,_,_,_,_,X,_,_,_,_,_,_,_)). \
curr(X)	:-	initially(meatSaleC(_,_,_,_,_,_,X,_,_,_,_,_,_)). \
payDueDate(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,X,_,_,_,_,_)). \
delAdd(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,X,_,_,_,_)). \
effDate(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,X,_,_,_)). \
delDueDateDays(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,_,X,_,_)). \
intRate(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,_,_,X,_)). \
initially(form(X))	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,_,_,X)). \
\
## Declarations \
 \
## Obligations \
 \
## Powers \
 \
## Surviving Obligations

declarations=\
## Domain \
ROLE(Seller). \
ROLE(Buyer). \
Currency(CAD). \
Currency(USD). \
Currency(EUR). \
 \
MeatQuality(PRIME). \
MeatQuality(AAA). \
MeatQuality(AA). \
MeatQuality(A). \
 \
ASSET(X)	:-	PerishableGood(X). \
PerishableGood(X)	:-	Meat(X). \
EVENT(X)	:-	Delivered(X). \
EVENT(X)	:-	Paid(X). \
EVENT(X)	:-	PaidLate(X). \
EVENT(X)	:-	Disclosed(X). \
 \
## Contract \
c(X)	:-	initially(meatSaleC(X,_,_,_,_,_,_,_,_,_,_,_,_)). \
\
initially(bind(seller,X))	:-	initially(meatSaleC(_,X,_,_,_,_,_,_,_,_,_,_,_)). \
initially(bind(buyer,X))	:-	initially(meatSaleC(_,_,X,_,_,_,_,_,_,_,_,_,_)). \
qnt(X)	:-	initially(meatSaleC(_,_,_,X,_,_,_,_,_,_,_,_,_)). \
qlt(X)	:-	initially(meatSaleC(_,_,_,_,X,_,_,_,_,_,_,_,_)). \
amt(X)	:-	initially(meatSaleC(_,_,_,_,_,X,_,_,_,_,_,_,_)). \
curr(X)	:-	initially(meatSaleC(_,_,_,_,_,_,X,_,_,_,_,_,_)). \
payDueDate(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,X,_,_,_,_,_)). \
delAdd(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,X,_,_,_,_)). \
effDate(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,X,_,_,_)). \
delDueDateDays(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,_,X,_,_)). \
intRate(X)	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,_,_,X,_)). \
initially(form(X))	:-	initially(meatSaleC(_,_,_,_,_,_,_,_,_,_,_,X)). \
\
## Declarations \
paidLate(E)	:-	happens(E,T),holds_at(type(E,paidLate)),holds_at(amount(E,amt_plus_interest),T),holds_at(currency(E,curr),T),holds_at(from(E,buyer),T),holds_at(to(E,seller),T). \
disclosed(E)	:-	happens(E,T),holds_at(type(E,disclosed)),holds_at(contractID(E,meatSaleC),T). \
paid(E)	:-	happens(E,T),holds_at(type(E,paid)),holds_at(amount(E,amt),T),holds_at(currency(E,curr),T),holds_at(from(E,buyer),T),holds_at(to(E,seller),T),. \
delivered(E)	:-	happens(E,T),holds_at(type(E,delivered)),holds_at(quantity(goods,qnt),T),holds_at(quality(goods,qlt),T),holds_at(item(E,goods),T),holds_at(deliveryAddress(E,delAdd),T),holds_at(delDueD(E,effDate_plus_delDueDates),T). \
 \
## Obligations \
 \
## Powers \
 \
## Surviving Obligations

badDeclarationCombinationVariable=\
## Domain \
ROLE(Seller). \
ROLE(Buyer). \
Currency(CAD). \
Currency(USD). \
Currency(EUR). \
 \
MeatQuality(PRIME). \
MeatQuality(AAA). \
MeatQuality(AA). \
MeatQuality(A). \
 \
ASSET(X)	:-	PerishableGood(X). \
PerishableGood(X)	:-	Meat(X). \
EVENT(X)	:-	Delivered(X). \
EVENT(X)	:-	Paid(X). \
EVENT(X)	:-	PaidLate(X). \
EVENT(X)	:-	Disclosed(X). \
 \
## Contract \
c(X)	:-	initially(meatSaleC(X,_,_,_,_,_)). \
 \
initially(bind(seller,X))	:-	initially(meatSaleC(_,X,_,_,_,_)). \
initially(bind(buyer,X))	:-	initially(meatSaleC(_,_,X,_,_,_)). \
effDate(X)	:-	initially(meatSaleC(_,_,_,X,_,_)). \
payDueDate(X)	:-	initially(meatSaleC(_,_,_,_,X,_)). \
goods(X)initially(meatSaleC(_,_,_,_,_,X)). \
initially(form(X))	:-	initially(meatSaleC(_,_,_,_,_,X)). \
 \
## Declarations \
paidLate(E)	:-	happens(E,T),holds_at(type(E,paidLate)),holds_at(amount(E,amt_plus_interest),T),holds_at(currency(E,curr),T),holds_at(from(E,buyer),T),holds_at(to(E,seller),T). \
disclosed(E)	:-	happens(E,T),holds_at(type(E,disclosed)),holds_at(contractID(E,meatSaleC),T). \
paid(E)	:-	happens(E,T),holds_at(type(E,paid)),holds_at(amount(E,amt),T),holds_at(currency(E,curr),T),holds_at(from(E,buyer),T),holds_at(to(E,seller),T),. \
delivered(E)	:-	happens(E,T),holds_at(type(E,delivered)),holds_at(quantity(goods,qnt),T),holds_at(quality(goods,qlt),T),holds_at(item(E,goods),T),holds_at(deliveryAddress(E,delAdd),T),holds_at(delDueD(E,effDate_plus_delDueDates),T). \
 \
## Obligations \
 \
## Powers \
 \
## Surviving Obligations \

badDomainRole=\
## Domain \
ROLE(Seller). \
 \
## Contract \
 \
c(X)	:-	initially(meatSaleC(X)). \
initially(form(X))	:-	initially(meatSaleC(X)). \
 \
## Declarations \
 \
## Obligations \
 \
## Powers \
 \
## Surviving Obligations \

noContractRequirement=\
## Domain \
 \
## Contract \
 \
c(X)	:-	initially(null(X)).initially(form(X))	:-	initially(null(X)). \
 \
##Declarations \
 \
## Obligations \
 \
## Powers \
 \
## Surviving Obligations \